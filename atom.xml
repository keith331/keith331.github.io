<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keith's note]]></title>
  <link href="http://keith331.github.io/atom.xml" rel="self"/>
  <link href="http://keith331.github.io/"/>
  <updated>2017-01-04T15:17:31+08:00</updated>
  <id>http://keith331.github.io/</id>
  <author>
    <name><![CDATA[Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Extundelete Recover Deleted Files]]></title>
    <link href="http://keith331.github.io/blog/2017/01/04/using-extundelete-recover-deleted-files/"/>
    <updated>2017-01-04T14:00:13+08:00</updated>
    <id>http://keith331.github.io/blog/2017/01/04/using-extundelete-recover-deleted-files</id>
    <content type="html"><![CDATA[<h3>Install extundelete</h3>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install extundelete</span></code></pre></td></tr></table></div></figure>


<h3>Start to restore file</h3>


<p>We need to know the inode of directory where the deleted file, eg./home/rulingcom/designer/Onepiece  use this command 
</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -id /home/rulingcom/designer</span></code></pre></td></tr></table></div></figure>


<p><img src="http://keith331.github.io/images/extundelete_1.png"><p></p>

<p>finding which devise that this directory is using </p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>df /home/rulingcom/designer</span></code></pre></td></tr></table></div></figure>


<p><img src="http://keith331.github.io/images/extundelete_2.png"><p></p>

<p>so this directory in /dev/sdb1 then lets look</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo extundelete /dev/sdb1 --inode 2229439</span></code></pre></td></tr></table></div></figure>


<p>The deleted files must be on the list</p>


<p><img src="http://keith331.github.io/images/extundelete_3.png"><p></p>

<p>If resoring go successful the file will be put on "RECOVERD_FILES" folder</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo extundelete /dev/sdb1 --restore-file /home/rulingcom/designer/Onepiece</span></code></pre></td></tr></table></div></figure>


<p><img src="http://keith331.github.io/images/extundelete_4.png"><p></p>

<h3>Start to restore director</h3>


<p>Changing the command "--restore-file" to "--restore-director"</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Rsnapshot on Ubuntu]]></title>
    <link href="http://keith331.github.io/blog/2016/12/21/rsnapshot-an-zhuang-yu-shi-yong-fang-shi/"/>
    <updated>2016-12-21T13:57:42+08:00</updated>
    <id>http://keith331.github.io/blog/2016/12/21/rsnapshot-an-zhuang-yu-shi-yong-fang-shi</id>
    <content type="html"><![CDATA[<h3>Install rsnapshot</h3>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install rsnapshot</span></code></pre></td></tr></table></div></figure>


<h3>Configuring Rsnapshot</h3>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/rsnapshot.conf</span></code></pre></td></tr></table></div></figure>


<p>The first decision you will need to make is where you would like to store your backups. We will use the directory “/backup” as our backup location. Search for and edit the following variable to set the backup location.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>snapshot_root             /backup/</span></code></pre></td></tr></table></div></figure>


<p>We set these up under the “BACKUP INTERVALS” section of the configuration. We tell rsnapshot to retain a specific number of backups of each kind of interval.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#########################################
</span><span class='line'>#           BACKUP INTERVALS            #
</span><span class='line'># Must be unique and in ascending order #
</span><span class='line'># i.e. hourly, daily, weekly, etc.      #
</span><span class='line'>#########################################
</span><span class='line'>
</span><span class='line'>retain        hourly  6
</span><span class='line'>retain        daily   7
</span><span class='line'>retain        weekly  4
</span><span class='line'>retain        monthly 3</span></code></pre></td></tr></table></div></figure>




<p>We will choose to backup the home directory and the etc directory.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>###############################
</span><span class='line'>### BACKUP POINTS / SCRIPTS ###
</span><span class='line'>###############################
</span><span class='line'>
</span><span class='line'># LOCALHOST
</span><span class='line'>backup  /home/          localhost/</span></code></pre></td></tr></table></div></figure>




<h3>Testing Your Configuration</h3>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rsnapshot configtest</span></code></pre></td></tr></table></div></figure>


<p>If your file is error-free, you will receive a “Syntax OK” message. If you did not receive this message, you need to go back and fix the mistakes that it tells you about.

Next, we want to perform a dry run of one of the snapshot to make sure we are producing the expected results. We use the "hourly" parameter because hourly backups are the basic snapshot type that the other intervals will build off of. That means that we will get more information from "hourly" than if we had choosen "daily" or "weekly".</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rsnapshot -t hourly</span></code></pre></td></tr></table></div></figure>




<p>If the generated output looks correct, you can remove the “-t” option to try your setup for the first time.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rsnapshot hourly</span></code></pre></td></tr></table></div></figure>




<h3>Automating the Process</h3>


<p>With rsnapshot working correctly, the only thing left to do is to schedule it to run at certain intervals. We will use cron, a linux scheduler, to make this happen.
</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/cron.d/rsnapshot</span></code></pre></td></tr></table></div></figure>




<p>The scheduling is currently commented out. We’re going to remove the “#” character from the beginning of the scheduling section to activate these values.</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This is a sample cron file for rsnapshot.
</span><span class='line'># The values used correspond to the examples in /etc/rsnapshot.conf.
</span><span class='line'># There you can also set the backup points and many other things.
</span><span class='line'>#
</span><span class='line'># To activate this cron file you have to uncomment the lines below.
</span><span class='line'># Feel free to adapt it to your needs.
</span><span class='line'>
</span><span class='line'>0 */4         * * *           root    /usr/bin/rsnapshot hourly
</span><span class='line'>30 3          * * *           root    /usr/bin/rsnapshot daily
</span><span class='line'>0  3          * * 1           root    /usr/bin/rsnapshot weekly
</span><span class='line'>30 2          1 * *           root    /usr/bin/rsnapshot monthly</span></code></pre></td></tr></table></div></figure>




<p>These settings will run add a snapshot to the “hourly” directory within our “/backup/” directory every four hours, add a daily snapshot everyday at 3:30 am, add a weekly snapshot every Monday at 3:00 am, and add a monthly snapshot on the first of every month at 2:30 am.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下使用lsyncd同步資料夾]]></title>
    <link href="http://keith331.github.io/blog/2016/10/20/ubuntuxia-shi-yong-lsyncdtong-bu-zi-liao-jia/"/>
    <updated>2016-10-20T16:18:17+08:00</updated>
    <id>http://keith331.github.io/blog/2016/10/20/ubuntuxia-shi-yong-lsyncdtong-bu-zi-liao-jia</id>
    <content type="html"><![CDATA[<h4>lsyncd一般用來同步備份資料夾，亦可以做到異機的同步，先下載安裝。</h4>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install lsyncd</span></code></pre></td></tr></table></div></figure>


<h4>安裝之後，一些目錄必須手動建立</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /etc/lsyncd
</span><span class='line'>touch /etc/lsyncd/lsyncd.conf.lua</span></code></pre></td></tr></table></div></figure>


<h4>編輯lsyncd.conf.lua</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>settings {
</span><span class='line'>    logfile = "/var/log/lsyncd/lsyncd.log",
</span><span class='line'>    statusFile = "/var/log/lsyncd/lsyncd.status",
</span><span class='line'>    delay = 0,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>sync {
</span><span class='line'>    default.rsyncssh,
</span><span class='line'>    source = "/home/ubuntu/xxx/public/uploads",       #來源機的目錄
</span><span class='line'>    host = "ubuntu@10.1.0.103",       #備份機位置
</span><span class='line'>    targetdir = "/home/ubuntu/xxx/public/uploads",        #備份機的目錄
</span><span class='line'>    delete = true,
</span><span class='line'>    rsync = {
</span><span class='line'>         rsh="ssh -l ubuntu -i /home/ubuntu/xxx_key.pem -o StrictHostKeyChecking=no",
</span><span class='line'>    }  #ssh另一台主機,並關掉確認指訊息
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>再到/var/log目錄下建立上述定義的檔名</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /var/log/lsyncd
</span><span class='line'>touch /var/log/lsyncd/lsyncd.log
</span><span class='line'>touch /var/log/lsyncd/lsyncd.status</span></code></pre></td></tr></table></div></figure>


<h4>lsyncd 透過 inotify 作為監測目錄寫入的機制</h4>


<p>而 inotify 可監測的數量則受到 fs.inotify.max_user_watches 這個參數的限制。如果 lsyncd 欲監測的目錄數量超過系統的上限，並不會出現錯誤訊息，而是多餘的目錄直接被忽略。為了避免此一現象的發生，所以在<code>vim /etc/sysctl.conf</code>看看是否有以下的配置額</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fs.inotify.max_user_watches = 999999</span></code></pre></td></tr></table></div></figure>


<p>設完好<code>sudo sysctl -p</code></p>

<h4>之後重啟服務</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service lsyncd restart</span></code></pre></td></tr></table></div></figure>


<h4>同步狀態，可輸入查看</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps aux | grep [l]syncd</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu ENV Install]]></title>
    <link href="http://keith331.github.io/blog/2016/10/13/ubuntu-env-install/"/>
    <updated>2016-10-13T11:35:18+08:00</updated>
    <id>http://keith331.github.io/blog/2016/10/13/ubuntu-env-install</id>
    <content type="html"><![CDATA[<h3>Import MongoDB public key</h3>


<ul>
    <li>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</li>
    <li>sudo echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list</li>
</ul>


<h3>Install Dependencies</h3>


<ul>
    <li>sudo apt-get update</li>
    <li>sudo apt-get -y upgrade</li>
    <li>sudo apt-get install -y nginx git-core mongodb-org imagemagick curl openssh-server nano</li>
    <li>sudo apt-get --no-install-recommends --yes install gawk g++ gcc make libc6-dev libreadline6-dev zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 autoconf libgdbm-dev libncurses5-dev automake libtool bison pkg-config libffi-dev</li>
</ul>


<h3>Install RVM and Ruby</h3>


<ul>
    <li>\curl -sSL https://get.rvm.io | bash -s stable</li>
    <li>source $HOME/.rvm/scripts/rvm</li>
    <li>rvm install 2.1 --default</li>
    <li>echo "gem: --no-ri --no-rdoc" > ~/.gemrc</li>
    <li>gem install bundler</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[弱點掃描]]></title>
    <link href="http://keith331.github.io/blog/2016/08/11/ruo-dian-sao-miao/"/>
    <updated>2016-08-11T17:01:54+08:00</updated>
    <id>http://keith331.github.io/blog/2016/08/11/ruo-dian-sao-miao</id>
    <content type="html"><![CDATA[<h3>Brakeman</h3>


<p>Brakeman是一款專門面向Ruby on Rails應用程式的漏洞掃描工具，同時也針對程序中一部分數值向另一部分傳遞的流程執行數據流分析。無需安裝整套應用程式即可使用該軟體</p>


<h4>gem install</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install brakeman</span></code></pre></td></tr></table></div></figure>


<h4>指定結果輸出的文件(全部掃描)</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd your_rails_app/
</span><span class='line'>brakeman -o output.html</span></code></pre></td></tr></table></div></figure>


<h4>也可以不掃描指定檔案如helper</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brakeman --skip-files application_helper.rb --ignore-model-output -o brakeman_adm.html</span></code></pre></td></tr></table></div></figure>


<h4>打開該文件即可對有問題的地方作修正，點選message可以看詳細內容</h4>


<p><img src="images/brakeman.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu操作筆記]]></title>
    <link href="http://keith331.github.io/blog/2016/08/02/ubuntucao-zuo-bi-ji/"/>
    <updated>2016-08-02T17:23:37+08:00</updated>
    <id>http://keith331.github.io/blog/2016/08/02/ubuntucao-zuo-bi-ji</id>
    <content type="html"><![CDATA[<h4>Precompile</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production bundle exec rake assets:precompile</span></code></pre></td></tr></table></div></figure>


<h4>停止網站</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill -s TERM `cat tmp/pids/unicorn.pid`</span></code></pre></td></tr></table></div></figure>


<h4>啟動網站Production模式</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec unicorn_rails -c config/unicorn.rb -D -E production</span></code></pre></td></tr></table></div></figure>


<h4>重啟網站</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill -s USR2 `cat tmp/pids/unicorn.pid`</span></code></pre></td></tr></table></div></figure>


<h4>/var/log/nginx 查看log</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail -f access.log</span></code></pre></td></tr></table></div></figure>


<h4>查看cpu</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /proc/cpuinfo | grep processor | wc -l</span></code></pre></td></tr></table></div></figure>


<h4>nginx轉址：以本地網址加/green為例，轉到http://XXX/green/，在nginx設定加入以下</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /green/ {
</span><span class='line'>   rewrite ^ http://XXX/green/ permanent;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>網址設定不接受副檔名，在nginx設定中加註</h4>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ~* \.(bak|zip|rar|exe)$|/\. {
</span><span class='line'>    deny all;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searchkick]]></title>
    <link href="http://keith331.github.io/blog/2016/06/23/searchkick/"/>
    <updated>2016-06-23T13:51:31+08:00</updated>
    <id>http://keith331.github.io/blog/2016/06/23/searchkick</id>
    <content type="html"><![CDATA[<p>step1</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install elasticsearch
</span><span class='line'>brew info elasticsearch</span></code></pre></td></tr></table></div></figure>


<p><img src="http://keith331.github.io/images/searchkick/1.png"><br></p>

<p>step2:Start the server than go to localhost:9200 .You should see some code</p>


<p>step3:Add searchkick to models you want to search.</p>


<p><img src="http://keith331.github.io/images/searchkick/2.png"></p>

<p>step4:Add data to the search index.</p>


<p><code>Product.reindex</code>
<code>rake searchkick:reindex CLASS=Movie</code></p>

<p>For instance</p>


<p><code>rake searchkick:reindex CLASS=Movie</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= form_tag search_movies_path, method: :get, class:"navbar-form navbar-right" do %>
</span><span class='line'>  &lt;p>
</span><span class='line'>    &lt;%= text_field_tag :search, params[:search], class:"form-control" %>
</span><span class='line'>    &lt;%= submit_tag "Search", name: nil, class:"btn btn-default" %>
</span><span class='line'>  &lt;/p>
</span><span class='line'>&lt;% end %></span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>view </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def search
</span><span class='line'>  if params[:search].present?
</span><span class='line'>    @movies = Movie.search(params[:search])
</span><span class='line'>  else
</span><span class='line'>    @movies = Movie.all
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raty JQery]]></title>
    <link href="http://keith331.github.io/blog/2016/06/22/raty-jqery/"/>
    <updated>2016-06-22T17:26:06+08:00</updated>
    <id>http://keith331.github.io/blog/2016/06/22/raty-jqery</id>
    <content type="html"><![CDATA[<h4>評分星星功能</h4>


<p>step1:copy jqerty.raty.js and image of star to [javascript] [image]</p>


<p>step2: view
<code> div class="star-rating" data-score= "xx"> </code>
paste the following code:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script>
</span><span class='line'>  $('.star-rating').raty ({
</span><span class='line'>    path: '/assets/',
</span><span class='line'>    readOnly: true,
</span><span class='line'>    score: function() {
</span><span class='line'>      return $(this).attr('data-score');
</span><span class='line'>    }
</span><span class='line'>  });
</span><span class='line'>&lt;/script></span></code></pre></td></tr></table></div></figure>
</p>


<p>step3: form  for example:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="field">
</span><span class='line'>    &lt;div id="star-rating">&lt;/div>
</span><span class='line'>  &lt;/div>
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;%= f.label :comment %>&lt;br>
</span><span class='line'>    &lt;%= f.text_area :comment %>
</span><span class='line'>  &lt;/div>
</span><span class='line'>  &lt;div class="actions">
</span><span class='line'>    &lt;%= f.submit %>
</span><span class='line'>  &lt;/div>
</span><span class='line'>&lt;% end %>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>  $('#star-rating').raty ({
</span><span class='line'>    path: '/assets/',
</span><span class='line'>    scoreName: '[review[rating]'
</span><span class='line'>  });
</span><span class='line'>&lt;/script></span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立 Amazon EC2 免費主機]]></title>
    <link href="http://keith331.github.io/blog/2016/05/24/jian-li-amazon-ec2-mian-fei-zhu-ji/"/>
    <updated>2016-05-24T10:33:38+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/24/jian-li-amazon-ec2-mian-fei-zhu-ji</id>
    <content type="html"><![CDATA[<h3>申請帳號</h3>


<p><a href="http://aws.amazon.com/tw/free/">http://aws.amazon.com/tw/free/</a></p>

<h3>建立免費AWS主機</h3>


<p>1.點選左上方的<code>services</code>選擇<code>EC2</code>服務：
<img src="http://keith331.github.io/images/aws_ec2_1.png"><p>
2.選擇機房位置，可以選台灣連線速度最佳的日本Tokyo或新加坡<code></code>Singapore
<img src="http://keith331.github.io/images/aws_ec2_2.png"><p>&lt;
3.選完地區後，點選左側<code>Instance</code>再點選<code>Launch Instance</code>進入建立主機的步驟：
<img src="http://keith331.github.io/images/aws_ec2_3.png"><p>
4.選擇你要的作業系統，這裡我選Ubuntu Server 12.04.3 LTS
<img src="http://keith331.github.io/images/aws_ec2_4.png"><p>
5.主機類型Instance Type請選擇免費的T2.micro
<img src="http://keith331.github.io/images/aws_ec2_5.png"><p>
6.其它步驟可忽略直接跳過，直接進入設定防火牆的確認，請確認SSH有開放，之後才能登入
<img src="http://keith331.github.io/images/aws_ec2_6.png"><p>
7.最後確認主機沒問題後點選<code>Launch</code>啟動主機：
<img src="http://keith331.github.io/images/aws_ec2_7.png"><p>
8.接著會彈出一個視窗，請選擇<code>Create a new key pair</code>，然後隨意輸入一個名字在<code>Key pair name </code>欄位，接著點選<code>Download Key Pair</code>，將下載的key收好，待會要用這把key登入你的主機，下載完後點選<code> Launch Instance</code>啟動主機：<p>
<img src="http://keith331.github.io/images/aws_ec2_8.png"><p></p>

<h3>登入AWS主機</h3>


<p>1.點選剛剛建立完成的主機，找到Public IP把它複製下來
<img src="http://keith331.github.io/images/aws_ec2_9.png"><p>
2.開啟終端機，輸入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i ~/路徑/密鑰名稱.pem 使用這名稱@IP</span></code></pre></td></tr></table></div></figure>


<p>3.UNPROTECTED PRIVATE KEY FILE，初次使用 Key Pair 登入 EC2 可能會遇到這個警告
通常是因為這個鑰匙檔的權限太過於公開
<img src="http://keith331.github.io/images/aws_ec2_10.png"><p>
輸入以下可以解決</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 400  ~/路徑/密鑰名稱.pem</span></code></pre></td></tr></table></div></figure>




<h3>將key加入</h3>


<p>ssh/id_rsa.pub內容 加到server下 authorized_keys 之後就不用輸入key</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass / SCSS]]></title>
    <link href="http://keith331.github.io/blog/2016/05/14/sass-slash-scss/"/>
    <updated>2016-05-14T21:52:35+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/14/sass-slash-scss</id>
    <content type="html"><![CDATA[<p>Asset Pipeline 提供了內建直接使用 Sass 撰寫 CSS 的功能。你也許會生出這樣的疑惑：什麼是 Sass？ Why should I care?</p>

<p>Sass (Syntactically Awesome Stylesheets) 原先是內建在 Haml 中的一個副功能。</p>

<h3>Haml</h3>


<p>要談 Sass，就不得不先來談 Haml 這個 project。 Haml 全名為 HTML Abstract Markup Language，它是提供網頁設計師撰寫 HTML 的另外一條途徑。</p>

<p>透過 Haml，你可以很快的使用它的 syntax 寫出結構穩固的 HTML。</p>

<p>網頁設計師經常有一個煩惱：在撰寫 HTML 時要是忘記關一個 TAG，在瀏覽器中整個版面可能就會大爆炸，而這樣的 Bug 卻是很難被抓出來的。</p>

<p>Haml 主要就是讓開發者，能夠使用縮排的方式撰寫 HTML，輕鬆做到永不忘記關 Tag 的效果。以下是 Haml 範例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%h1= "Hello World"</span></code></pre></td></tr></table></div></figure>


<p>產生出來的 HTML 就會長這樣</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>Hello World&lt;/h1></span></code></pre></td></tr></table></div></figure>


<p>而</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%ul{:id => "list", :class => "menu"}
</span><span class='line'>    %li= "Item 1"
</span><span class='line'>    %li= "Item 2"
</span><span class='line'>    %li= "Item 3"</span></code></pre></td></tr></table></div></figure>


<p>會產生出來這樣的 HTML</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="list" class="menu">
</span><span class='line'>      &lt;li>Item 1&lt;/li>
</span><span class='line'>      &lt;li>Item 2&lt;/li>
</span><span class='line'>      &lt;li>Item 3&lt;/li>
</span><span class='line'>  &lt;/ul></span></code></pre></td></tr></table></div></figure>


<h3>使用 Haml 撰寫 HTML 的好處</h3>


<p>Haml 是需要使用縮排撰寫，再行 compile 的 markup language。它可以讓你：</p>

<h4>阻絕撰寫出錯誤結構的 HTML TAG 的機會</h4>


<p>只要 syntax 一錯誤，編譯就無法成功。利用這樣的特性，很容易阻絕寫出會在瀏覽器因為 TAG 結構錯誤而難以 debug 出的 HTML。</p>

<h4>輕鬆調整排版</h4>


<p>在網頁設計開發階段，若要大幅調整 HTML 結構，對網頁設計師也是很傷腦筋的一件事。因為大幅的搬動 HTML，通常有時候會造成：「少剪到一個 TAG」或 「改了開頭 TAG ，卻忘了改關閉 TAG 」的憾事。</p>

<p>在 Haml 中，這些狀況都不會發生。因為 Haml 本身就屬於「塊狀結構」、「自我 close」。因此不論怎樣搬動和調整，只要符合縮排，幾乎都不會爆炸。</p>

<h4>使用 Haml 撰寫 HTML 的壞處</h4>


<p>如此 powerful 的 markup language 為何沒有風行？反倒是原先屬於副功能的 Sass 大紅特紅。原因就在於 Haml 的特性：不只需要被機器 compile，它也需要被人腦 compile。</p>

<p>HTML 本身就是一門相當直觀的 markup language。在撰寫 Haml 時，排版雖然相當輕鬆。但接手維護 Haml 版面的人，卻通常痛苦不堪。因為「非常不直觀」。</p>

<p>這也是 Haml 的反對者，批評最力的地方。</p>

<p>多數人無法接受維護不直觀的「任何東西」，加上撰寫 Haml 需要另外學習特殊的 syntax。沒有壓倒性的好處，一般人是不會貿然進行技術投資的。這也是為什麼 Haml 始終處是小眾技術的主要原因。</p>

<h3>Sass / SCSS</h3>


<p>拉回來談 Sass，Sass 原先是附屬在 Haml 裡面的一個副功能。這也是 sass-convert 這個指令必須要安裝 haml 這個 gem 才能使用的原因。</p>

<p>Sass 的原理，是讓開發者可以透過「縮排」的方式去撰寫維護 CSS，同樣可以避免忘記關 TAG 而大爆炸的糗事。</p>

<p>而因為 CSS 的結構特性，造成了 Sass 與 Haml 截然不同的命運。多數人反對 Haml，是因為 Haml 反而造成了 HTML 在閱讀上的不直觀。</p>

<p>而 Sass 的語法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content
</span><span class='line'>    margin: 2em 0
</span><span class='line'>    h1
</span><span class='line'>      font-size: 2em</span></code></pre></td></tr></table></div></figure>


<p>產生出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{
</span><span class='line'>    margin: 2em 0;
</span><span class='line'>   }
</span><span class='line'>   .content h1{
</span><span class='line'>      font-size: 2em;
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<p>反倒讓 CSS 的維護變得直觀了。接觸 Sass / SCSS 後的不少開發者甚至認為，縮排 block 的撰寫方式才是 CSS 在被發明時應該被設計出來的樣子。</p>

<p>現在撰寫 CSS 的方式，有一個絕大缺點：只要在結構上涉及巢狀或多個 class，維護者就必須複製貼上 style。不少人認為這真是愚蠢至極且煩人透頂的設計。</p>

<p>其他便利功能</p>

<p>Sass 也提供了其他便利功能，如變數、函數、數學、繼承、mixin …等等功能。</p>

<p>在進行網頁 protyping 時，更改全站配色或者是直接提供兩個以上的設計，對設計師來說是家常便飯的事。</p>

<p>但更改全站配色卻是相當麻煩的一件事，因為「尋找 + 全數取代」，並不能保證最後會有正確的結果。很有可能：你更改了所有 CSS 中涉及連結的顏色，卻發現在全數取代的過程中，不小心也改到邊框的顏色。</p>

<p>若能使用變數去指定特定 style 的顏色，該有多好。</p>

<p>變數 ( Variables )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$border-color: #3bbfce
</span><span class='line'>   $link-color: #3bbfcf
</span><span class='line'>   .content
</span><span class='line'>      border-color: $border-color
</span><span class='line'>      a
</span><span class='line'>        color: $link-color</span></code></pre></td></tr></table></div></figure>


<p>生成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{ border-color: #3bbfce; }
</span><span class='line'>   .content a{color: #3bbfcf; }</span></code></pre></td></tr></table></div></figure>


<p>數學</p>

<p>在調整區塊寬度時，你也希望：每次調整寬度時，可不可以不要每次都按計算機，再全數手動修改…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content
</span><span class='line'>      width: (500px/2);</span></code></pre></td></tr></table></div></figure>


<p>生成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>``` css
</span><span class='line'>   .content{ width: 250px; }</span></code></pre></td></tr></table></div></figure>


<p>內建函式</p>

<p>在調整顏色亮度時，你希望可否無需再開調色盤，直接改 CSS 就讓 style 暗一點？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$color = darken(#800, 20%)
</span><span class='line'>   .content
</span><span class='line'>      background-color: $color</span></code></pre></td></tr></table></div></figure>


<p>生成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{ background-color: #200; }</span></code></pre></td></tr></table></div></figure>


<p>這都還只是 Sass 所提供的當中一小部分基礎功能而已，卻足以讓網頁設計師驚艷十足了。加上撰寫維護時十分直觀，這也難怪為何 Sass 只是 Haml 中的副功能，後繼的聲勢浪頭卻遠高於 Haml 本身。</p>

<p>SCSS</p>

<p>那 SCSS 又與 Sass 有什麼差別，他們看起來好像是類似的東西？</p>

<p>是這樣的，Sass 原先使用的縮排，對於網頁設計師來說，還是相當不直觀。而且實務上也不能直接將舊有的 CSS 直接貼進 Sass 中。其實還是存在一定的不方便度。也因此 Sass 進行了進化，改良了 syntax，而 Sass 3 後來就被稱為 SCSS ( Sassy CSS)。</p>

<p>它的 syntax 與 CSS 原有的 syntax 完全 compatible，使用了 { } 去取代原先的縮排方式。</p>

<p>比如說原有的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content
</span><span class='line'>    margin: 2em 0
</span><span class='line'>    h1
</span><span class='line'>      font-size: 2em</span></code></pre></td></tr></table></div></figure>


<p>在 SCSS 中變成了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{
</span><span class='line'>    margin: 2em 0;
</span><span class='line'>    h1 {font-size: 2em }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>在撰寫上，更加無比的直觀，同時也能將舊有的 CSS 直接貼進去，完全沒問題！SCSS 更新增了不少關於 CSS3 的 feature 函式。</p>

<p>就拿我最愛的背景漸變色來說好了，原先要做漸變色，CSS 必須要這樣寫：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#linear-gradient {
</span><span class='line'>   background-image: -webkit-gradient(linear, 0% 0%, 100% 100%, color-stop(0%, #ffffff), color-stop(100%, #dddddd));
</span><span class='line'>   background-image: -webkit-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: -moz-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: -o-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: -ms-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'> }</span></code></pre></td></tr></table></div></figure>


<p>因為你必須支援所有的 Browser。</p>

<p>但在 SCSS 中，一行就搞定了！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#linear-gradient { @include background-image(linear-gradient(left top, white, #dddddd)); }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邏輯慣例]]></title>
    <link href="http://keith331.github.io/blog/2016/05/14/luo-ji-guan-li/"/>
    <updated>2016-05-14T21:49:13+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/14/luo-ji-guan-li</id>
    <content type="html"><![CDATA[<h3>if / unless 的寫作觀念</h3>


<p>Ruby 在邏輯控制的部份，除了提供 if 還提供了 unless。</p>

<p>unless 等於 「if not something 」等於 「if !something」。</p>

<p>不過雖說 Ruby 提供了 unless 這個用法，但在實務上來說，一般還是不太推薦使用 unless。除了以下幾種狀況：</p>

<p>當語意較適合時，使用 unless</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unless content.blank?
</span><span class='line'>  # ....
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>沒有 else 的時候，使用 unless</p>

<p>當沒有 else 的時候，看起來還算 OK</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unless foo?
</span><span class='line'>  # ....
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>但加上一個 else，看起來就不是那麼直觀了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unless foo?
</span><span class='line'>  # ....
</span><span class='line'>else
</span><span class='line'>  # ....
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>如果專案當中有這樣的 code，相信我，換成 if 的陳述會直觀許多。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if !foo?
</span><span class='line'>  # ....
</span><span class='line'>else
</span><span class='line'>  # ....
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>當只有一個條件時，使用 unless 很適合。但多個條件時，使用 unless 很糟糕。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unless foo? && baz?
</span><span class='line'>  # ....
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>相同的，改成 if 也會直觀許多</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if !foo? || !baz?
</span><span class='line'>  # ...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helper_method 與 View_context]]></title>
    <link href="http://keith331.github.io/blog/2016/05/14/helper-method-yu-view-context/"/>
    <updated>2016-05-14T21:44:22+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/14/helper-method-yu-view-context</id>
    <content type="html"><![CDATA[<h3>helper_method</h3>


<p>在 controller 裡面的 method 不能在 view 裡面用。</p>

<p>也就是在</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ProductsController
</span><span class='line'>  def find_cart
</span><span class='line'>    @cart = Cart.find(session[:cart_id])
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>View 裡面不能用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= find_cart.items %></span></code></pre></td></tr></table></div></figure>


<p>拉這個 cart 出來直接用。</p>

<p>如果你要在 controller 和 view 都能拉現在的購物車，必須要用 helper_method 宣告這是一個 controller 級的 helper。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ApplicationController
</span><span class='line'>  helper_method :current_cart
</span><span class='line'>  def current_cart
</span><span class='line'>    cart = Cart.find(session[:cart_id])
</span><span class='line'>    return cart
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>這樣你就能在 View 裡面用 current_cart。</p>

<p>&lt;%= current_cart.items %>
或者是 Controller 裡面也能用 current_cart。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ProductsController
</span><span class='line'>  def add_to_cart
</span><span class='line'>    current_cart.items &lt;&lt; @product
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>view_context</p>

<p>在 helper 裡面的 method 不能在 controller 裡面用。 也就是在</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ProductsController
</span><span class='line'>  def show
</span><span class='line'>    @page_description = truncate(@product.desc, :lenght => 50 )
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>是不會動的。</p>

<p>如果要在 controller 裡面取用系統內建的 Rails View Helper，或自定義的 View Helper。 必須要用 view_context 去調用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ProductsController
</span><span class='line'>  def show
</span><span class='line'>    @page_description =  view_context.truncate(@product.desc, :lenght => 50 )
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>小結</h3>


<p>但基本上還是建議在 View Helper 與 Controller 的 code 不要互相混來呼叫來呼叫去。讓 View 歸 View，Controller 歸 Controller。若真有業務上的需求需要「到處都可以用」。建議寫 Module 掛在 lib 用 mixin 技巧混入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Form]]></title>
    <link href="http://keith331.github.io/blog/2016/05/13/nested-form/"/>
    <updated>2016-05-13T18:57:25+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/13/nested-form</id>
    <content type="html"><![CDATA[<p>Nested form 可以將有關聯的 model attribute 放在同一個 form 裡面一起建立或更新。</p>

<p>例如這次的實作是一個商品有很多種規格，我希望在新增商品的時候就可以同時新增完規格（ product has_many specs ）。</p>

<h3>1.在 Modle 中宣告我們可以接受 specs 的 attributes：</h3>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Product &lt; ActiveRecord::Base
</span><span class='line'>  has_many :specs, :dependent => :destroy
</span><span class='line'>  accepts_nested_attributes_for :specs</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Spec &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :product
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<h3>2.在 Controller 中指定接收的 Attributes</h3>


<p>由於我們在 People Controller 內的 Strong Parameters 並不包含 color 這個 attributes，所以在新增 Specs 的時候就無法把 color 寫進資料庫，這時候需要加上 specs_attributes: [] 這個 Attributes，並且將要傳的 Specs Attributes 寫進 Array 中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class PeopleController &lt; ActionController::Base
</span><span class='line'>  def update
</span><span class='line'>    person.update_attributes!(person_params)
</span><span class='line'>    redirect_to :back
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private
</span><span class='line'>    def person_params
</span><span class='line'>      params.require(:person).permit(:name, :age, specs_attributes: [:color])
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>如此一來後端的設定就算是OK了，接下來是前端form的部分，在此用simple_form作為例子</p>

<p>如果是用 simple_form 就是使用 simple_field_for 的這個helper即可</p>

<p>view/admin/products/_form.html.erb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= simple_form_for [:admin, @product] do |f|  %>
</span><span class='line'>  &lt;%= f.input :name, :required => true %>
</span><span class='line'>  &lt;%= f.input :description, :required => true %>
</span><span class='line'>  &lt;%= f.input :price %>
</span><span class='line'>
</span><span class='line'>  &lt;!-- nested form從這裡開始 -->
</span><span class='line'>  &lt;%= f.simple_fields_for :specs do |spec| %>
</span><span class='line'>    &lt;%= spec.input :name %> &lt;!-- spec的name欄位 -->
</span><span class='line'>    &lt;%= spec.input :detail %> &lt;!-- spec的detail欄位 -->
</span><span class='line'>  &lt;% end %>
</span><span class='line'>  &lt;!-- nested form結束 -->
</span><span class='line'>
</span><span class='line'>  &lt;%= f.button :submit, "Submit", :disable_with => "Submiting..." %>
</span><span class='line'>&lt;% end %></span></code></pre></td></tr></table></div></figure>


<p>這樣就完成了最簡單的nested form了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Counter_cache]]></title>
    <link href="http://keith331.github.io/blog/2016/05/10/counter-cache/"/>
    <updated>2016-05-10T11:16:17+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/10/counter-cache</id>
    <content type="html"><![CDATA[<p>counter_cache 是在做關聯性資料庫時計算資料量的一個方法。</p>

<p>照樣舉「Board」has_many「Topics」的例子來看 正常我們會寫類似下方的程式碼來算出這個 Board 內有多少個 Topics：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@board.topics.size</span></code></pre></td></tr></table></div></figure>


<p>這代表每次我們要算數量的時候都得下一個sql指令去算有多少topics，一樣是會造成效能問題。</p>

<p>所以 Rails 內建了 counter_cache 的方法，我們只要在 Topic model 內加上counter_cache: true</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Topic &lt; ActiveRecord::Base
</span><span class='line'>    belongs_to :board, counter_cache: true
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>然後在 Board 的資料庫內新增一個叫做topics_count的欄位</p>

<p>這樣以後當這個 Board內的 topics 有增減的時候，Rails就會幫我們增減topics_count的欄位，如此一來下次再下@board.topics.size的指令時 Rails就會預設去找topics_count的欄位，不用重新下 SQL指令計算。</p>

<p>自定 Counter Cache 欄位：</p>

<p>我們也可以覆蓋 Rails的預設規定，自己定義要增減的欄位名稱，例如把topics_count改成count_of_topics：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Topic &lt; ActiveRecord::Base
</span><span class='line'>    belongs_to :board, counter_cache: :count_of_topics
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Includes]]></title>
    <link href="http://keith331.github.io/blog/2016/05/10/includes/"/>
    <updated>2016-05-10T11:14:34+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/10/includes</id>
    <content type="html"><![CDATA[<p>當我們操作關聯性資料時，可以使用includes將關聯資料先抓出來，這樣每次要調用資料時就不是去資料庫搜尋，而是從已經調閱出來的資料搜尋，可以提高效能。舉例說明：</p>

<p>假設「Board」has_many「Topics」，原本我們會這樣寫：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Board &lt; ActiveRecord::Base
</span><span class='line'>  def
</span><span class='line'>    @boards = Board.all
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>這種情況下若我們在view裡面寫@board.topics，假設我們共有10個board，系統會這樣幫我們找資料：</p>

<p>1.到資料庫裡找board_id = 1 的topic</p>

<p>2.到資料庫裡找board_id = 2 的topic</p>

<p>&hellip;..</p>

<p>10.到資料庫裡找board_id = 10 的topic</p>

<p>這樣的做法有個很弔詭的地方在於我們重複搜尋了資料庫10次，造成效能問題。</p>

<p>若加上 includes後會是這樣：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Board &lt; ActiveRecord::Base
</span><span class='line'>  def
</span><span class='line'>    @boards = Board.includes(:topics).all
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>這種時候我們若在view裡面寫@board.topics，假設我們共有10個board，系統會這樣幫我們找資料：</p>

<p>1.到資料庫裡把topic全部抓出來</p>

<p>2.從抓出來的 topic中找到 board_id 相對應的topic。</p>

<p>這樣做我們就只需要搜尋一次，直接減少了資料庫的負擔。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookies &amp; Session]]></title>
    <link href="http://keith331.github.io/blog/2016/05/10/cookies-and-session/"/>
    <updated>2016-05-10T11:05:56+08:00</updated>
    <id>http://keith331.github.io/blog/2016/05/10/cookies-and-session</id>
    <content type="html"><![CDATA[<p>Cookies</p>

<p>看演唱會或是去遊樂園玩常常會發生一種情況，就是入場以後要暫時出場，這時候工作人員通常會給你蓋個手章，用來註記你曾經入場過，基本上 Cookies 的功用就是這個手章，只要使用者進到我們的網站，我們就幫他儲存一個 Cookies ，下次當使用者再度造訪時我們就可以由 Cookies 得知使用者的資訊。</p>

<p>有些遊樂園的手章上會標記當天的入園時間，以免有人回家不洗澡隔天又來玩一次，而 cookies 記錄這個時間的方法就是以 key/value 的形式儲存在使用者的瀏覽器中，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"login_time": "1990/2/1"}</span></code></pre></td></tr></table></div></figure>


<p>但 Cookies 屬於沒有加密的公開檔案，所以不建議儲存敏感資料。</p>

<p>Session</p>

<p>相較於 Cookies 存在 Client 端， Session 則是存在 Server 的資料，通常與 Cookies 相呼應。</p>

<p>當使用者造訪我們的網站時，我們由伺服器產生 session id (32 byte long MD5 hash value)，並傳送存有這個 session id 的 cookie 給瀏覽器儲存，之後使用者造訪我們網站時，只需要比對 cookies 上的 session id 和 session 裡的 session id 就可以知道使用者身份，大部份的網站也是運用此原理實作儲存 User 登入狀態的機制。</p>

<p>這樣做的好處是若有人劫取到使用者的 Cookies 資料也無法得知資料內容，但是仍有 Hijacking 攻擊的疑慮，可以參考 Rails Guide 的 Security章節。</p>

<p>Rails session</p>

<p>在 Rails 中只要使用session[:session_name] 的 instance method 就可以在 controller 拿取 Session 的資料，例如以下的購物車功能：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ApplicationController &lt; ActionController::Base
</span><span class='line'>  def find_cart
</span><span class='line'>    @cart = Cart.find_by(id: session[:cart_id])
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>同理我們也可以將資料儲存或刪除 Session：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ApplicationController &lt; ActionController::Base
</span><span class='line'>  def store_cart
</span><span class='line'>    session[:cart_id] = cart.id
</span><span class='line'>  end
</span><span class='line'>  def reset_cart
</span><span class='line'>    session.delete(:cart_id)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>延伸閱讀-Authenticity Token</p>

<p>所謂的 authenticity_token 就是一串隨機生成的 string ，在我們建立 Rails 的表單時， Rails 將會隨機生成一個 authenticity_token 存在 session 中，並且在表單的 hidden field 中也加入一樣的 authenticity_token ，當我們送出表單（post request）時， rails 會驗證表單的 authenticity_token 和 session 中的 authenticity_token 是否一樣，一樣才可以成功送出。</p>

<p>這樣做的好處是可以避免所謂的跨站請求偽造 (Cross-site Request Forgery) ，又稱 CSRF。 CSRF 攻擊的原理是偽造一個 form 送 post 給伺服器，所以很有可能發生的情況是你在Ａ網站有登入使用者，但是在Ｂ網站點了帶有 CSRF code的連結，內容是要重新設定Ａ網站的使用者密碼為 12345678，此時Ａ網站以為是你自己送出的請求，那麼你的密碼就被換掉了。</p>

<p>而 Rails 加上了 authenticity_token 這樣的機制就是為了阻擋 CSRF，因為Ｂ網站不會知道你的 authenticity_token 是什麼，送出的 post request 就會被擋下來。在 CSRF 中預設會檢查 POST, PUT, DELETE requests 的 authenticity_token。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass/SCSS]]></title>
    <link href="http://keith331.github.io/blog/2016/03/16/sass-slash-scss/"/>
    <updated>2016-03-16T10:53:28+08:00</updated>
    <id>http://keith331.github.io/blog/2016/03/16/sass-slash-scss</id>
    <content type="html"><![CDATA[<p>Asset Pipeline 提供了內建直接使用 Sass 撰寫 CSS 的功能。你也許會生出這樣的疑惑：什麼是 Sass？ Why should I care?</p>

<p>Sass (Syntactically Awesome Stylesheets) 原先是內建在 Haml 中的一個副功能。</p>

<p>Haml</p>

<p>要談 Sass，就不得不先來談 Haml 這個 project。 Haml 全名為 HTML Abstract Markup Language，它是提供網頁設計師撰寫 HTML 的另外一條途徑。</p>

<p>透過 Haml，你可以很快的使用它的 syntax 寫出結構穩固的 HTML。</p>

<p>網頁設計師經常有一個煩惱：在撰寫 HTML 時要是忘記關一個 TAG，在瀏覽器中整個版面可能就會大爆炸，而這樣的 Bug 卻是很難被抓出來的。</p>

<p>Haml 主要就是讓開發者，能夠使用縮排的方式撰寫 HTML，輕鬆做到永不忘記關 Tag 的效果。以下是 Haml 範例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%h1= "Hello World"</span></code></pre></td></tr></table></div></figure>


<p>產生出來的 HTML 就會長這樣</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1>Hello World&lt;/h1></span></code></pre></td></tr></table></div></figure>


<p>而</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%ul{:id => "list", :class => "menu"}
</span><span class='line'>    %li= "Item 1"
</span><span class='line'>    %li= "Item 2"
</span><span class='line'>    %li= "Item 3"</span></code></pre></td></tr></table></div></figure>


<p>會產生出來這樣的 HTML</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="list" class="menu">
</span><span class='line'>      &lt;li>Item 1&lt;/li>
</span><span class='line'>      &lt;li>Item 2&lt;/li>
</span><span class='line'>      &lt;li>Item 3&lt;/li>
</span><span class='line'>  &lt;/ul></span></code></pre></td></tr></table></div></figure>


<p>使用 Haml 撰寫 HTML 的好處</p>

<p>Haml 是需要使用縮排撰寫，再行 compile 的 markup language。它可以讓你：</p>

<p>阻絕撰寫出錯誤結構的 HTML TAG 的機會</p>

<p>只要 syntax 一錯誤，編譯就無法成功。利用這樣的特性，很容易阻絕寫出會在瀏覽器因為 TAG 結構錯誤而難以 debug 出的 HTML。</p>

<p>輕鬆調整排版</p>

<p>在網頁設計開發階段，若要大幅調整 HTML 結構，對網頁設計師也是很傷腦筋的一件事。因為大幅的搬動 HTML，通常有時候會造成：「少剪到一個 TAG」或 「改了開頭 TAG ，卻忘了改關閉 TAG 」的憾事。</p>

<p>在 Haml 中，這些狀況都不會發生。因為 Haml 本身就屬於「塊狀結構」、「自我 close」。因此不論怎樣搬動和調整，只要符合縮排，幾乎都不會爆炸。</p>

<p>使用 Haml 撰寫 HTML 的壞處</p>

<p>如此 powerful 的 markup language 為何沒有風行？反倒是原先屬於副功能的 Sass 大紅特紅。原因就在於 Haml 的特性：不只需要被機器 compile，它也需要被人腦 compile。</p>

<p>HTML 本身就是一門相當直觀的 markup language。在撰寫 Haml 時，排版雖然相當輕鬆。但接手維護 Haml 版面的人，卻通常痛苦不堪。因為「非常不直觀」。</p>

<p>這也是 Haml 的反對者，批評最力的地方。</p>

<p>多數人無法接受維護不直觀的「任何東西」，加上撰寫 Haml 需要另外學習特殊的 syntax。沒有壓倒性的好處，一般人是不會貿然進行技術投資的。這也是為什麼 Haml 始終處是小眾技術的主要原因。</p>

<p>Sass / SCSS</p>

<p>拉回來談 Sass，Sass 原先是附屬在 Haml 裡面的一個副功能。這也是 sass-convert 這個指令必須要安裝 haml 這個 gem 才能使用的原因。</p>

<p>Sass 的原理，是讓開發者可以透過「縮排」的方式去撰寫維護 CSS，同樣可以避免忘記關 TAG 而大爆炸的糗事。</p>

<p>而因為 CSS 的結構特性，造成了 Sass 與 Haml 截然不同的命運。多數人反對 Haml，是因為 Haml 反而造成了 HTML 在閱讀上的不直觀。</p>

<p>而 Sass 的語法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content
</span><span class='line'>    margin: 2em 0
</span><span class='line'>    h1
</span><span class='line'>      font-size: 2em</span></code></pre></td></tr></table></div></figure>


<p>產生出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{
</span><span class='line'>    margin: 2em 0;
</span><span class='line'>   }
</span><span class='line'>   .content h1{
</span><span class='line'>      font-size: 2em;
</span><span class='line'>   }</span></code></pre></td></tr></table></div></figure>


<p>反倒讓 CSS 的維護變得直觀了。接觸 Sass / SCSS 後的不少開發者甚至認為，縮排 block 的撰寫方式才是 CSS 在被發明時應該被設計出來的樣子。</p>

<p>現在撰寫 CSS 的方式，有一個絕大缺點：只要在結構上涉及巢狀或多個 class，維護者就必須複製貼上 style。不少人認為這真是愚蠢至極且煩人透頂的設計。</p>

<p>其他便利功能</p>

<p>Sass 也提供了其他便利功能，如變數、函數、數學、繼承、mixin …等等功能。</p>

<p>在進行網頁 protyping 時，更改全站配色或者是直接提供兩個以上的設計，對設計師來說是家常便飯的事。</p>

<p>但更改全站配色卻是相當麻煩的一件事，因為「尋找 + 全數取代」，並不能保證最後會有正確的結果。很有可能：你更改了所有 CSS 中涉及連結的顏色，卻發現在全數取代的過程中，不小心也改到邊框的顏色。</p>

<p>若能使用變數去指定特定 style 的顏色，該有多好。</p>

<p>變數 ( Variables )</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$border-color: #3bbfce
</span><span class='line'>   $link-color: #3bbfcf
</span><span class='line'>   .content
</span><span class='line'>      border-color: $border-color
</span><span class='line'>      a
</span><span class='line'>        color: $link-color</span></code></pre></td></tr></table></div></figure>


<p>生成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{ border-color: #3bbfce; }
</span><span class='line'>   .content a{color: #3bbfcf; }</span></code></pre></td></tr></table></div></figure>


<p>數學</p>

<p>在調整區塊寬度時，你也希望：每次調整寬度時，可不可以不要每次都按計算機，再全數手動修改…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content
</span><span class='line'>      width: (500px/2);</span></code></pre></td></tr></table></div></figure>


<p>生成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>``` css
</span><span class='line'>   .content{ width: 250px; }</span></code></pre></td></tr></table></div></figure>


<p>內建函式</p>

<p>在調整顏色亮度時，你希望可否無需再開調色盤，直接改 CSS 就讓 style 暗一點？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$color = darken(#800, 20%)
</span><span class='line'>   .content
</span><span class='line'>      background-color: $color</span></code></pre></td></tr></table></div></figure>


<p>生成</p>

<p>   .content{ background-color: #200; }
這都還只是 Sass 所提供的當中一小部分基礎功能而已，卻足以讓網頁設計師驚艷十足了。加上撰寫維護時十分直觀，這也難怪為何 Sass 只是 Haml 中的副功能，後繼的聲勢浪頭卻遠高於 Haml 本身。</p>

<p>SCSS</p>

<p>那 SCSS 又與 Sass 有什麼差別，他們看起來好像是類似的東西？</p>

<p>是這樣的，Sass 原先使用的縮排，對於網頁設計師來說，還是相當不直觀。而且實務上也不能直接將舊有的 CSS 直接貼進 Sass 中。其實還是存在一定的不方便度。也因此 Sass 進行了進化，改良了 syntax，而 Sass 3 後來就被稱為 SCSS ( Sassy CSS)。</p>

<p>它的 syntax 與 CSS 原有的 syntax 完全 compatible，使用了 { } 去取代原先的縮排方式。</p>

<p>比如說原有的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content
</span><span class='line'>    margin: 2em 0
</span><span class='line'>    h1
</span><span class='line'>      font-size: 2em</span></code></pre></td></tr></table></div></figure>


<p>在 SCSS 中變成了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.content{
</span><span class='line'>    margin: 2em 0;
</span><span class='line'>    h1 {font-size: 2em }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>在撰寫上，更加無比的直觀，同時也能將舊有的 CSS 直接貼進去，完全沒問題！SCSS 更新增了不少關於 CSS3 的 feature 函式。</p>

<p>就拿我最愛的背景漸變色來說好了，原先要做漸變色，CSS 必須要這樣寫：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#linear-gradient {
</span><span class='line'>   background-image: -webkit-gradient(linear, 0% 0%, 100% 100%, color-stop(0%, #ffffff), color-stop(100%, #dddddd));
</span><span class='line'>   background-image: -webkit-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: -moz-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: -o-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: -ms-linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'>   background-image: linear-gradient(left top, #ffffff, #dddddd);
</span><span class='line'> }</span></code></pre></td></tr></table></div></figure>


<p>因為你必須支援所有的 Browser。</p>

<p>但在 SCSS 中，一行就搞定了！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#linear-gradient { @include background-image(linear-gradient(left top, white, #dddddd)); }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's Helper]]></title>
    <link href="http://keith331.github.io/blog/2016/03/15/whats-helper/"/>
    <updated>2016-03-15T10:26:29+08:00</updated>
    <id>http://keith331.github.io/blog/2016/03/15/whats-helper</id>
    <content type="html"><![CDATA[<p>Helper 是一些使用在 Rails 的 View 當中，用 Ruby 產生/整理 HTML code 的一些小方法。通常被放在 app/helpers 下。預設的 Helper 名字是對應 Controller 的，產生一個 Controller 時，通常會產生一個同名的 Helper。如 PostsController 與 PostsHelper。</p>

<p>使用 Helper 的情境多半是：</p>

<p>產生的 HTML code 需要與原始程式碼進行一些邏輯混合，但不希望 View 裡面搞得太髒。
需要與預設的 Rails 內建的一些方便 Helper 交叉使用。
使用 Helper 封裝程式碼可以帶給專案以下一些優點：</p>

<p>Don&rsquo;t repeat yourself（DRY）程式碼不重複
Good Encapsulation好的封裝性
提供 view 模板良好的組織
易於修改程式碼</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module BoardsHelper
</span><span class='line'>
</span><span class='line'> # 回傳board的name，避免在view中做太多判斷
</span><span class='line'>  def render_board_name(board)
</span><span class='line'>      if board.present?
</span><span class='line'>        board.name
</span><span class='line'>    else
</span><span class='line'>        "unknown"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'># 常常重複的區段也可以寫進 helper，統一管理
</span><span class='line'>  def render_board_name_path(board)
</span><span class='line'>    link_to(board.name, board_path(board))
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>在view中可以直接取用如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= render_board_name_path(@board) %></span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[撰寫rake]]></title>
    <link href="http://keith331.github.io/blog/2016/03/05/zhuan-xie-rake/"/>
    <updated>2016-03-05T11:03:00+08:00</updated>
    <id>http://keith331.github.io/blog/2016/03/05/zhuan-xie-rake</id>
    <content type="html"><![CDATA[<h2>撰寫 rake dev:build => 自動化執行清空+重跑 migration +種子載入資料</h2>




<p>雖然 db:reset 已經能自動地幫我們把資料庫清空、重建、跑 seed

如果想把整個開發中專案的資料一切歸零，還需要跑 rake log:clear 跟 rake tmp:clear
如果懶得一個個打上述指令 + rake db:drop + rake db:create + rake db:migrate + rake db:seed
來把整個專案清空重建並建立 seed 檔
可以寫一個 rake 來自動化執行

在 lib/tasks/ 資料夾建立一個檔案 dev.rake</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>namespace :dev do
</span><span class='line'>  desc "Rebuild system"
</span><span class='line'>  task :build => ["tmp:clear", "log:clear", "db:drop", "db:create", "db:migrate"]
</span><span class='line'>  task :rebuild => [ "dev:build", "db:seed" ]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>這樣只要打</p>

<p><code>rake dev:build</code>
即可把專案資料一切清空歸零重建</p>

<p><code>rake dev:rebuild</code>
即可重建完再跑 seed</p>

<h1> 撰寫 seed.rb 檔</h1>


<p>
  我們在開發專案的時候，常會需要弄些假資料來填充版面
或是說當資料庫炸掉的時候，會很想一股腦把 資料庫整個 reset 掉
並希望 reset 完還能把一些資料放進去，像是 user, groups, posts，不用一個個手動輸入

我們來做一個 seed 檔，需求:

建立一個 user 帳號 => example@gmail.com , 密碼 12345678
並用此帳號建立 20 個 groups
每個 group 各有 30 個 posts
</p>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts "這個種子檔會自動建立一個帳號, 並且創建 20 個 groups, 每個 group 各 30 個 posts"
</span><span class='line'>
</span><span class='line'>create_account = User.create([email: 'example@gmail.com', password: '12345678', password_confirmation: '12345678', name: '測試用帳號'])
</span><span class='line'>
</span><span class='line'>create_groups = for i in 1..20 do
</span><span class='line'>                  Group.create!([title: "Group no.#{i}", description: "這是用種子建立的第 #{i} 個討論版", user_id: "1"])
</span><span class='line'>                  GroupUser.create(group_id: i, user_id: 1)
</span><span class='line'>                  for k in 1..30 do
</span><span class='line'>                    Post.create!([group_id: "#{i}",content: "這是用種子建立的第 #{k} 個留言", user_id: "1"])
</span><span class='line'>                  end
</span><span class='line'>                end</span></code></pre></td></tr></table></div></figure>


<p><code>rake db:reset</code>
rake db:reset 是內建的 task ，會執行一整套流程
包含 db:drop( 資料庫移除 ) => db:create( 資料庫建立 )
=> db:schema:load ( 資料庫欄位建立 ) => db:seed ( 執行資料庫種子 )</p>

<p>重新啟動 rails s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note_message]]></title>
    <link href="http://keith331.github.io/blog/2016/03/01/note-message/"/>
    <updated>2016-03-01T20:09:44+08:00</updated>
    <id>http://keith331.github.io/blog/2016/03/01/note-message</id>
    <content type="html"><![CDATA[<h2>以下這段是訊息通知功能，供日後參考</h2>




<figure class='code'><figcaption><span>app/helpers/application_helper.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notice_message</span>
</span><span class='line'>    <span class="n">alert_types</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">notice</span><span class="p">:</span> <span class="ss">:success</span><span class="p">,</span> <span class="ss">alert</span><span class="p">:</span> <span class="ss">:danger</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">close_button_options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;close&quot;</span><span class="p">,</span> <span class="s2">&quot;data-dismiss&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;alert&quot;</span><span class="p">,</span> <span class="s2">&quot;aria-hidden&quot;</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">close_button</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:button</span><span class="p">,</span> <span class="s2">&quot;×&quot;</span><span class="p">,</span> <span class="n">close_button_options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alerts</span> <span class="o">=</span> <span class="n">flash</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="p">,</span> <span class="n">message</span><span class="o">|</span>
</span><span class='line'>      <span class="n">alert_content</span> <span class="o">=</span> <span class="n">close_button</span> <span class="o">+</span> <span class="n">message</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">alert_type</span> <span class="o">=</span> <span class="n">alert_types</span><span class="o">[</span><span class="n">type</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">||</span> <span class="n">type</span>
</span><span class='line'>      <span class="n">alert_class</span> <span class="o">=</span> <span class="s2">&quot;alert alert-</span><span class="si">#{</span><span class="n">alert_type</span><span class="si">}</span><span class="s2"> alert-dismissable&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="n">alert_content</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="n">alert_class</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alerts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2>把 notice_message 放進 application.html.erb 裡面</h2>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="container-fluid">
</span><span class='line'>  &lt;%= render "common/navbar" %>
</span><span class='line'>+ &lt;%= notice_message %>
</span><span class='line'>  &lt;%= yield %>
</span><span class='line'>&lt;/div></span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
